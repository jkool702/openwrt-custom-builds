#!/bin/sh /etc/rc.common

##################################################
# SETUP AND CONTROL (START/STOP) PLEX MEDIA SERVER
##################################################
#
# # # # # IMPORTANT VARIABLES # # # # #
#
# PLEX_BROWSER_ROOT: the mountpoint of the usb HDD containing the plex library and media files
# PLEX_LIBRARY_DIR: the path to the main plex library where the application stores its data
#                    ---> This needs to be at "${PLEX_BROWSER_ROOT}/.plex/Library" or "${PLEX_BROWSER_ROOT}/*/.plex/Library"
# PLEX_MEDIA_SERVER_APPLICATION_SUPPORT_DIR: the plex application uses this for storing metadata and stuff liker that
#                    ---> This needs to be at "${PLEX_LIBRARY_DIR}/Application Support"
# PLEX_COMPRESSED_ARCHIVE_PATH: this is where the plex binary and libraries (in a xz-compressed squashfs image or tar archive) are stored 
#                    For squashfs images (preffered): the sqfs image will be copied to the router's memory and then mounted
#                    For tar archives: the archive will be decompressed and extracted onto the device memory before plex can be started
#                    When mounted/extracted, this should produce a folder whose title identifies the plex version that contains the plex binaries (Plex Media Server) and libraries (libs/)
#                    ---> This needs to be at "${PLEX_LIBRARY_DIR}/Application/plexmediaserver.txz"
# PLEX_TMP_DIR: The main dir (ideally, though not absolutely required to be) on the device RAM where plex binaries and libraries are decompressed
#                    Should you desire (e.g., for testing a new plex release) multiple versions of plex can be used side-by-side here
#                    ---> The default location for this is "/tmp/plexmediaserver"
# PLEX_VERSION: The plex version in use. This is auto-determined based on the folder name that decompressing the archive with the binaries and libraries gives
#                    If multiple versions are available, the highest version (found via `sort -Vr | head -n 1`) is used. 
#                    ---> A specific plex version can be forced using the UCI variable "plexmediaserver.@main[0].plex_force_version"
# PLEX_BIN_DIR: The directory actually containing the (version-specific) plex binaries and libraries
#                   ---> This will be at "${PLEX_TMP_DIR}/${PLEX_VERSION}"
# TMPDIR: stores temp files for a specific plex instance that is running. 
#                   ---> This will be at "${PLEX_BIN_DIR}/tmp"
#
# # # # # NOTE: UCI variables must be setup for things to work right. If they havent been setup yet, call this script with the 1st argument set to either 'setup_uci' or 'check_uci'


#################################################################################################################

NAME='plexmediaserver'
START=99
STOP=99
EXTRA_COMMANDS="setup_uci unpack_plex check_update update do_update"
EXTRA_HELP=$(cat<<EOF
        setup_uci       Does initial setup of UCI, and (if needed) downloads required plex files
        unpack_plex     Unpacks the compresssed plexmediaserver archive at /tmp/plexmediaserver/<plex_version>
        check_update    Checks if an updated Plex Media Server package is available for download
        update          Downloads Plex Media Server update (if available) and runs do_update to generate a compressed archive of it
        do_update	      Actually downloads and generates the compressed squashfs archive (calling do_update will not check first with check_update)
EOF
)

setup_uci() {
	echo "setting up UCI config for plexmediaserver" >&2

	[ -e /etc/config/plexmediaserver ] || echo '' >> /etc/config/plexmediaserver 
	plex_UCI="$(/sbin/uci show plexmediaserver)"
	
	# if plexmediaserver.@main[0] doesnt exist, scrap config and start from scratch
	if ! echo "${plex_UCI}" | grep -Fq 'plexmediaserver.@main[0]'; then
		/sbin/uci delete plexmediaserver; 
		/sbin/uci add plexmediaserver main; 
		/sbin/uci commit plexmediaserver; 
		plex_UCI="$(/sbin/uci show plexmediaserver)"; 
	fi
	
	# add (empty) config values for any missing UCI options
	for UCI_opt in plex_library_dir plex_application_support_dir plex_browser_root plex_compressed_archive_path plex_tmp_dir plex_force_update_download_url plex_force_version plex_version plex_bin_dir; do
		echo "${plex_UCI}" | grep -qF "${UCI_opt}" || /sbin/uci add_list plexmediaserver.@main[0].${UCI_opt}=''
	done
	
	# commit changes
	/sbin/uci commit plexmediaserver;
	reload_config

	# load values from UCI
	load_uci
	
}

load_uci() {
	echo "loading and checking UCI config for plexmediaserver" >&2

	# read identification variables from UCI

	PLEX_BROWSER_ROOT="$(/sbin/uci get plexmediaserver.@main[0].plex_browser_root)"
	PLEX_LIBRARY_DIR="$(/sbin/uci get plexmediaserver.@main[0].plex_library_dir)"
	PLEX_MEDIA_SERVER_APPLICATION_SUPPORT_DIR="$(/sbin/uci get plexmediaserver.@main[0].plex_application_support_dir)"
	PLEX_COMPRESSED_ARCHIVE_PATH="$(/sbin/uci get plexmediaserver.@main[0].plex_compressed_archive_path)"
	PLEX_TMP_DIR="$(/sbin/uci get plexmediaserver.@main[0].plex_tmp_dir)"
	PLEX_VERSION="$(/sbin/uci get plexmediaserver.@main[0].plex_version)"
	PLEX_BIN_DIR="$(/sbin/uci get plexmediaserver.@main[0].plex_bin_dir)"

	# check UCI variables and set empty/invalid ones to default values

	{ [ -z "${PLEX_BROWSER_ROOT}" ] || ! [ -e "${PLEX_BROWSER_ROOT}" ]; } && PLEX_BROWSER_ROOT="$(cat /proc/mounts | grep -E '^\/dev\/sd' | grep -Ev 'squashfs|ubifs' | sed -E s/'^\/dev\/[^ \t]*[ \t]+([^ \t]*)[ \t]+.*$'/'\1'/ | while read -r nn; do find "$nn" -maxdepth 2 -type d -name '.plex'; done | while read -r nn; do [ -e "${nn}/Library" ] && echo "$nn" | sed -E s/'\/[^\/]*$'// && break; done | head -n 1)"
  { [ -z "${PLEX_BROWSER_ROOT}" ] || ! [ -e "${PLEX_BROWSER_ROOT}" ]; } && [ -e /etc/fstab ] && mount -a && PLEX_BROWSER_ROOT="$(cat /proc/mounts | grep -E '^\/dev\/sd' | grep -Ev 'squashfs|ubifs' | sed -E s/'^\/dev\/[^ \t]*[ \t]+([^ \t]*)[ \t]+.*$'/'\1'/ | while read -r nn; do find "$nn" -maxdepth 2 -type d -name '.plex'; done | while read -r nn; do [ -e "${nn}/Library" ] && echo "$nn" | sed -E s/'\/[^\/]*$'// && break; done | head -n 1)"
  { [ -z "${PLEX_BROWSER_ROOT}" ] || ! [ -e "${PLEX_BROWSER_ROOT}" ]; } && {
   	for devPath in /dev/sda*; do
   		[[ "$devPath" == '/dev/sda' ]] && continue
   		mkdir -p "/mnt/$(basename "$devPath")"
   		mount "${devPath}" "/mnt/$(basename "$devPath")"
   		PLEX_BROWSER_ROOT="$(cat /proc/mounts | grep -E '^\/dev\/sd' | grep -Ev 'squashfs|ubifs' | sed -E s/'^\/dev\/[^ \t]*[ \t]+([^ \t]*)[ \t]+.*$'/'\1'/ | while read -r nn; do find "$nn" -maxdepth 2 -type d -name '.plex'; done | while read -r nn; do [ -e "${nn}/Library" ] && echo "$nn" | sed -E s/'\/[^\/]*$'// && break; done | head -n 1)"
   		if { [ -z "${PLEX_BROWSER_ROOT}" ] || ! [ -e "${PLEX_BROWSER_ROOT}" ]; }; then
   			umount "/mnt/$(basename "$devPath")"
   		else
   			break
   		fi
   	done
  }
	{ [ -z "${PLEX_BROWSER_ROOT}" ] || ! [ -e "${PLEX_BROWSER_ROOT}" ]; } && { echo 'COULD NOT DETERMINE THE MOUNTPOINT OF THE DRIVE HOLDING THE PLEX LIBRARY. PLEASE MOUNT IT AND RESTART PLEX' >&2; exit 1; }
	[ -n "${PLEX_BROWSER_ROOT}" ] && /sbin/uci set plexmediaserver.@main[0].plex_browser_root="${PLEX_BROWSER_ROOT}"

	if { [ -z "${PLEX_LIBRARY_DIR}" ] || ! [ -e "${PLEX_LIBRARY_DIR}" ]; }; then
		if [ -e "${PLEX_BROWSER_ROOT}/.plex/Library" ]; then
			PLEX_LIBRARY_DIR="${PLEX_BROWSER_ROOT}/.plex/Library"
		else
			PLEX_LIBRARY_DIR="$(find "${PLEX_BROWSER_ROOT}" -type d -maxdepth 3 -path '*/.plex/Library' | head -n 1)"
		fi
		[ -n "${PLEX_LIBRARY_DIR}" ] && /sbin/uci set plexmediaserver.@main[0].plex_library_dir="${PLEX_LIBRARY_DIR}" && mkdir -p "${PLEX_LIBRARY_DIR}/Application" && mkdir -p "${PLEX_LIBRARY_DIR}/Application Support" 
	fi

	[ -z "${PLEX_TMP_DIR}" ] && {
		PLEX_TMP_DIR="/tmp/plexmediaserver" 
		/sbin/uci set plexmediaserver.@main[0].plex_tmp_dir="${PLEX_TMP_DIR}"
	}

	mkdir -p "${PLEX_TMP_DIR}"

	[ -z "${PLEX_MEDIA_SERVER_APPLICATION_SUPPORT_DIR}" ]  && {
		PLEX_MEDIA_SERVER_APPLICATION_SUPPORT_DIR="${PLEX_LIBRARY_DIR}/Application Support"  
		/sbin/uci set plexmediaserver.@main[0].plex_application_support_dir="${PLEX_MEDIA_SERVER_APPLICATION_SUPPORT_DIR}"
	}
 [ -e "${PLEX_MEDIA_SERVER_APPLICATION_SUPPORT_DIR}" ] || mkdir -p "${PLEX_MEDIA_SERVER_APPLICATION_SUPPORT_DIR}"

  [ -z "${PLEX_COMPRESSED_ARCHIVE_PATH}" ] && { 
		[ -e "${PLEX_LIBRARY_DIR}/Application/plexmediaserver.txz" ] && PLEX_COMPRESSED_ARCHIVE_PATH="${PLEX_LIBRARY_DIR}/Application/plexmediaserver.txz" || PLEX_COMPRESSED_ARCHIVE_PATH="${PLEX_LIBRARY_DIR}/Application/plexmediaserver.sqfs"
		/sbin/uci set plexmediaserver.@main[0].plex_compressed_archive_path="${PLEX_COMPRESSED_ARCHIVE_PATH}"
	}
  [ -d "$(dirname "${PLEX_COMPRESSED_ARCHIVE_PATH}")" ] || mkdir -p "$(dirname "${PLEX_COMPRESSED_ARCHIVE_PATH}")"

	/sbin/uci commit plexmediaserver
	reload_config 

	[ -e "${PLEX_COMPRESSED_ARCHIVE_PATH}" ] || { check_update && do_update; }

}

unpack_plex() {
	
	# setup / load config from UCI
	setup_uci
	
	# decompress Plex Binaries and Libs from plexmediaserver.txz
	{ [ -z "${PLEX_BIN_DIR}" ] || [ -z "${PLEX_VERSION}" ] || [ \! -f "${PLEX_BIN_DIR}/Plex Media Server" ]; } && echo "Preparing plexmediaserver for use - extracting plex binaries and library files" >&2 || return 0
	if [[ "${PLEX_COMPRESSED_ARCHIVE_PATH}" == *.txz ]] || [[ "${PLEX_COMPRESSED_ARCHIVE_PATH}" == *.tar.xz ]]; then
		xz -dc "${PLEX_COMPRESSED_ARCHIVE_PATH}" | tar -C "${PLEX_TMP_DIR}" -xf -
	elif [[ "${PLEX_COMPRESSED_ARCHIVE_PATH}"  == *.sqfs ]]; then
		cp "${PLEX_COMPRESSED_ARCHIVE_PATH}" "${PLEX_TMP_DIR}" 
		mount -t squashfs -o ro,relatime "${PLEX_TMP_DIR}/$(basename "${PLEX_COMPRESSED_ARCHIVE_PATH}")" "${PLEX_TMP_DIR}"
		for nn in  "${PLEX_TMP_DIR}"/*/tmp; do
			mount -t tmpfs tmpfs "${nn}"
		done
	fi
	
	# set a few more UCI variables now that we have unpacked plex and know the plex version 
	ls -1 "${PLEX_TMP_DIR}" | grep -q -E '^[0-9]+\..*$' && PLEX_VERSION="$(ls -1 "${PLEX_TMP_DIR}" | grep -E '^[0-9]+\..*$' | sort -Vr | head -n 1)" && /sbin/uci set plexmediaserver.@main[0].plex_version="${PLEX_VERSION}"
	[ -n "$(/sbin/uci get plexmediaserver.@main[0].plex_force_version)" ] &&  [ -e "${PLEX_TMP_DIR}/$(/sbin/uci get plexmediaserver.@main[0].plex_force_version)" ] && PLEX_VERSION="$(/sbin/uci get plexmediaserver.@main[0].plex_force_version)" && /sbin/uci set plexmediaserver.@main[0].plex_version="${PLEX_VERSION}"
	
	PLEX_BIN_DIR="${PLEX_TMP_DIR}/${PLEX_VERSION}" && /sbin/uci set plexmediaserver.@main[0].plex_bin_dir="${PLEX_BIN_DIR}"
	[ "${PLEX_COMPRESSED_ARCHIVE_PATH}" == *.txz ] && mkdir -p "${PLEX_BIN_DIR}/tmp"

	/sbin/uci commit plexmediaserver
	reload_config

}

is_running() {

	[ x${PLEX_TMP_DIR} == x ] && PLEX_TMP_DIR="$(/sbin/uci get plexmediaserver.@main[0].plex_tmp_dir)"
	[ x${PLEX_TMP_DIR} == x ] && PLEX_TMP_DIR='/tmp/plexmediaserver'

	plex_pid="$(cat "${PLEX_MEDIA_SERVER_APPLICATION_SUPPORT_DIR}/Plex Media Server/plexmediaserver.pid")"
	[ x${plex_pid} == x ] && plex_pid=-1

	PLEX_PID_LIST="$(ps | grep -E '((Plex Media Server)|(Plex DLNA Server)|(PMS RunServer)|(Plex Plug-in)|(Plex Script Hos)|('"${PLEX_TMP_DIR}"')|(^ *'"${plex_pid}"'))' | grep -v grep | awk '{print $1}')"
	[ x${PLEX_PID_LIST} == x ] && return 1 
	[ "$1" == '-pid' ] && echo "${PLEX_PID_LIST}"
	return 0

}

stop() {

	# setup / load config from UCI
	setup_uci

	plex_umount() {
		cat /proc/mounts | grep plexmediaserver | grep -q squashfs && umount "${PLEX_BIN_DIR}/tmp" "${PLEX_TMP_DIR}"
		echo "" > "${PLEX_MEDIA_SERVER_APPLICATION_SUPPORT_DIR}/Plex Media Server/plexmediaserver.pid"
	}

	# dont kill anything is plex isnt running
	is_running || {  echo "Plex Media Server not running" >&2; plex_umount; return; }
		
	echo "Stopping Plex Media Server"

	# kill with `kill -3`
	{ is_running -pid || { plex_umount; return; }; } | xargs -r kill -3 && echo echo "SIGQUIT sent to server. Waiting 3 seconds and terminating if not dead" >&2 && sleep 3

	# kill with `kill -15`
	{ is_running -pid || { echo "Plex Media Server shutdown cleanly" >&2; plex_umount; return; }; } | xargs -r kill -15 && echo echo "SIGTERM sent to server. Waiting 3 seconds and force killing if not dead" >&2 && sleep 3

	# kill any remnants still running with `kill -9`
	{ is_running -pid || { echo "Plex Media Server shutdown" >&2; plex_umount; return; }; } | xargs -r kill -9 && echo "Force killing leftover plexmediaserver processes" >&2

}
	

start() {

	# setup / load config from UCI
	# run unpack operation if plex binary not found

	unpack_plex

	echo "Starting Plex Media Server" >&2
	echo "To access Plex from a web browser, go to: $(ip addr show br-lan | grep 'inet '| sed -E s/'^.*inet (.*)\/.*$'/'\1'/):32400/web" >&2
	
	# export identification variables
	export PLEX_MEDIA_SERVER_INFO_VENDOR="$(grep \"id\": /etc/board.json | awk -F:\  '{print $2}' | tr -d \" | awk -F, '{print $1}')"
	export PLEX_MEDIA_SERVER_INFO_DEVICE="$(grep \"id\": /etc/board.json | awk -F:\  '{print $2}' | tr -d \" | awk -F, '{print $2}')"
	export PLEX_MEDIA_SERVER_INFO_MODEL="$(uname -m)"
	export PLEX_MEDIA_SERVER_INFO_PLATFORM_VERSION="$(grep ^NAME= /etc/os-release | awk -F= '{print $2}' | tr -d \")"
	export PLEX_MEDIA_SERVER_HOME="${PLEX_BIN_DIR}"
	export PLEX_MEDIA_SERVER_MAX_PLUGIN_PROCS=6
	export PLEX_MEDIA_SERVER_DISABLE_AUTOUPDATES=1
	export PLEX_MEDIA_SERVER_DEFAULT_PREFERENCES="ScannerLowPriority=true&DlnaEnabled=false&TranscoderVideoResolutionLimit=1280x720&TranscoderH264Preset=ultrafast"
	export LC_ALL="C"
	export LANG="C"
	export TMPDIR="${PLEX_BIN_DIR}/tmp"
	export PLEX_BIN_DIR="${PLEX_BIN_DIR}"
	export PLEX_TMP_DIR="${PLEX_TMP_DIR}"
	export PLEX_LIBRARY_DIR="${PLEX_LIBRARY_DIR}"
	export PLEX_VERSION="${PLEX_VERSION}"
	export PLEX_BROWSER_ROOT="${PLEX_BROWSER_ROOT}"
	export PLEX_MEDIA_SERVER_APPLICATION_SUPPORT_DIR="${PLEX_MEDIA_SERVER_APPLICATION_SUPPORT_DIR}"

	cd "${PLEX_BIN_DIR}"
	"${PLEX_BIN_DIR}/Plex Media Server" & 
}

restart() {

  stop
  sleep 2
  stop
  sleep 2
  start
}

check_update() {

	# determine URL's and tmp directories to use during the script
	plex_url="$(/sbin/uci get plexmediaserver.@main[0].plex_force_update_download_url)"
	[ -z "${plex_url}" ] && plex_url="$(curl https://plex.tv/api/downloads/5.json | sed -E s/'"id"'/'\n\n\n"id"'/g | grep asustor | sed -E s/'\{"label"'/'\n\n\n{"label"'/g | grep "$({ [ $(uname -m) == aarch64 ] || grep </proc/kallsyms -q 'arm64'; } && echo ARMv8 || echo ARMv7)" | sed -E s/'^.*"url"\:"(.*\.apk)"\,.*$'/'\1'/)"
	
	if [ x${PLEX_VERSION} != x ] && [ x${plex_url} != x ] && $(echo "${plex_url}" | grep -q -F "${PLEX_VERSION}"); then
		echo "Plex Media Server is up to date" >&2
		plex_update_available=0
	elif $(echo "${plex_url}" | grep -q -E '^.+\/PlexMediaServer\-.+\.apk'); then
		echo -e "An Update for Plex Media Server is available!!\n\nCurrent version:  ${PLEX_VERSION}\nNew Version:      $(echo "$plex_url" | sed -E s/'^.*\/PlexMediaServer-(.*)\.apk$'/'\1'/)\n" >&2
		return 0
	else
		echo "Download url for downloading an update to plex was not resolved. The download url can be manually specified via the plexmediasserver UCI variable 'plex_force_update_download_url'" >&2
		return 1
	fi
}

update() {

	check_update && {
		setup_uci
		do_update
	}

}

do_update() {

# This script downloads a armv8 NAS plexmediaserver package extracts it then generates an xz-xcompressed squashfs image out of it
#
# The following variables *might* need to be manually altered in some situations
#
# 'plex_archive_type' : extension to use for archive. Allowable values are:
#	'xz' or 'tar.xz' or 'txz' produces a *.tar.xz archive
# 	'sqfs' produces a squashfs archive (THIS IS PREFFERED AND IS THE DEFAULT)
# 	'both' produces both
#
# `plex_tmp` is the tmp/working directory and where the generated archive will be output to. 
# 	It must be on a filesystem with enough free space to hold the downloaded plex files.
# 	    It needs to hold a compressed and uncompressed copy of the plex package 
# 	     --> a few hundred MB max data usage (so it might or might not fit in RAM)
# 	If set in UCI, "plex_compressed_archive_path" is used (since this is where the generated archive needs to go). Otherwise, /tmp/plex_tmp is used.
#
# `plex_url` is the download link for the up-to-date plex version to use. By default it tries to fetch the latest asustor armv7neon plex packagee released.


	# set/check archive type
	plex_archive_type="$(/sbin/uci get plexmediaserver.@main[0].plex_compressed_archive_path | sed -E s/'^.*\.((sqfs)|(tgx)|(tar.gz))'/'\1'/)"
	{ [ -z ${plex_archive_type} ] || [ ${plex_archive_type} == 'squashfs' ]; } && plex_archive_type='sqfs'
	{ [ "${plex_archive_type}" == 'txz' ] || [ "${plex_archive_type}" == 'tar.xz' ]; } && plex_archive_type='txz'
	{ [ "${plex_archive_type}" == 'txz' ] || [ "${plex_archive_type}" == 'sqfs' ]; } || plex_archive_type='both'
			
		
	if [ -n "$(/sbin/uci get plexmediaserver.@main[0].plex_compressed_archive_path)" ]; then
		plex_tmp="$(dirname "$(/sbin/uci get plexmediaserver.@main[0].plex_compressed_archive_path)")" 
	else
		plex_tmp=/tmp/plex_tmp
	fi
	
	kk=0
	while [ -e "${plex_tmp}/${kk}" ]; do
		kk=$(( ${kk} + 1 ))
	done
	mkdir -p "${plex_tmp}/${kk}"
		
	cd "${plex_tmp}/${kk}"
	
	# download (up-to-date) plex version
	
	wget "${plex_url}"
		
	plex_filename="${plex_tmp}/${kk}/$(echo "${plex_url}" | sed -E s/'^.*\/'// | sed -E s/'\.apk$'//)"
	
	mv "${plex_filename}.apk" "${plex_filename}.zip"
	unzip "${plex_filename}.zip"
	
	plex_ver="$(echo "${plex_filename}" | sed -E s/'^.*PlexMediaServer\-'//)"
	mkdir "${plex_tmp}/${kk}/${plex_ver}"
	mv data.tar.gz  "${plex_tmp}/${kk}/${plex_ver}"
	cd "${plex_tmp}/${kk}/${plex_ver}"
	
	gzip -dc "${plex_tmp}/${kk}/${plex_ver}/data.tar.gz" | tar -x
	mv "${plex_tmp}/${kk}/${plex_ver}/data.tar.gz" "${plex_tmp}/${kk}"
	cd "${plex_tmp}/${kk}"
	
	[ -f "${plex_tmp}/plexmediaserver.${plex_archive_type}" ] && mv -f "${plex_tmp}/plexmediaserver.${plex_archive_type}" "${plex_tmp}/plexmediaserver.${plex_archive_type}.old"
	
	mkdir -p "${plex_tmp}/${kk}/${plex_ver}/tmp"
	{ [ "${plex_archive_type}" == 'txz' ] || [ "${plex_archive_type}" == 'both' ]; } && tar -cvOf - "${plex_ver}" | xz -6e -zc > "${plex_tmp}/plexmediaserver.txz"
	{ [ "${plex_archive_type}" == 'sqfs' ] || [ "${plex_archive_type}" == 'both' ]; } && mksquashfs "${plex_ver}" "plexmediaserver.sqfs" -all-root -keep-as-directory -comp xz
	
	mkdir -p "${plex_tmp}/old"
	mv "${plex_tmp}/plexmediaserver."* "${plex_tmp}/old"
	
	mv "${plex_tmp}/${kk}/plexmediaserver.sqfs" "${plex_tmp}"
		
	cd "${plex_tmp}"
	
	rm -rf "${plex_tmp}/${kk}"
	
	{ [ "${plex_archive_type}" == 'sqfs' ] || [ "${plex_archive_type}" == 'both' ]; } && [ -e "${plex_tmp}/plexmediaserver.sqfs" ] && echo "Plex Media Server XZ-compresssed SquashFS (.sqfs) archive generated!. Archive is located at: ${plex_tmp}/plexmediaserver.sqfs" >&2
	{ [ "${plex_archive_type}" == 'txz' ] || [ "${plex_archive_type}" == 'both' ]; } && [ -e "${plex_tmp}/plexmediaserver.txz" ] && echo "Plex Media Server XZ compressed TAR (.txz) archive generated!. Archive is located at: ${plex_tmp}/plexmediaserver.txz}" >&2

	stop
	sleep 1
	stop
	sleep 1
	sync
        start
	sleep 1

	exit
	
}



